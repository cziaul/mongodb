db.flightData.insertOne({
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  })
  
 db.flightData.insertMany( [ {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }]
  ) 
  
  
  
  db.flightData.insertOne({
    "departureAirport": "TXL",
    "arrivalAirport": "LHR",
  })
  
  db.flightData.insertOne({
    "_id": "tx1-1hr-1",
    "departureAirport": "TXL",
    "arrivalAirport": "LHR"
  })
  
db.flightData.deleteOne({departureAirport: "TXL"})
    
db.flightData.update({distance: 12000}, {$set: {marker: "delete"}})

db.flightData.updateMany({}, {$set: {marker: "toDelete"}})
db.flightData.deleteMany({marker: "toDelete"})
db.flightData.deleteMany({})

db.flightData.find().pretty()

db.flightData.find({intercontinental: true}).pretty()
db.flightData.find({distance: {$gt: 1000}}).pretty()
db.flightData.find({distance: {$gt: 900}}).pretty()

db.flightData.updateOne({_id: ObjectId("5fc3190d46841a3710c93849")},{$set: {delayed: true}})
db.flightData.update({_id: ObjectId("5fc3190d46841a3710c93849")},{delayed: false})
db.flightData.replaceOne({_id: ObjectId("5fc3190d46841a3710c93849")}, { "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true})
    
//Passengers
db.passengers.insertMany( [
  {
    "name": "Max Schwarzmueller",
    "age": 29
  },
  {
    "name": "Manu Lorenz",
    "age": 30
  },
  {
    "name": "Chris Hayton",
    "age": 35
  },
  {
    "name": "Sandeep Kumar",
    "age": 28
  },
  {
    "name": "Maria Jones",
    "age": 30
  },
  {
    "name": "Alexandra Maier",
    "age": 27
  },
  {
    "name": "Dr. Phil Evans",
    "age": 47
  },
  {
    "name": "Sandra Brugge",
    "age": 33
  },
  {
    "name": "Elisabeth Mayr",
    "age": 29
  },
  {
    "name": "Frank Cube",
    "age": 41
  },
  {
    "name": "Karandeep Alun",
    "age": 48
  },
  {
    "name": "Michaela Drayer",
    "age": 39
  },
  {
    "name": "Bernd Hoftstadt",
    "age": 22
  },
  {
    "name": "Scott Tolib",
    "age": 44
  },
  {
    "name": "Freddy Melver",
    "age": 41
  },
  {
    "name": "Alexis Bohed",
    "age": 35
  },
  {
    "name": "Melanie Palace",
    "age": 27
  },
  {
    "name": "Armin Glutch",
    "age": 35
  },
  {
    "name": "Klaus Arber",
    "age": 53
  },
  {
    "name": "Albert Twostone",
    "age": 68
  },
  {
    "name": "Gordon Black",
    "age": 38
  }
]
)
db.passengers.find().pretty() //will give first 20 by default

db.passengers.find().toArray()  //will show all data

//db.passengers.find().forEach() find gives multiple documents and cursor 

db.passengers.find().forEach((passengerData) => {printjson(passengerData)})


//projection (when we don't need all fields)

//looking for name
db.passengers.find({}, {name: 1}).pretty()

//since id comes by default, we need to exclusively exclude id

db.passengers.find({}, {name: 1, _id: 0}).pretty()

//Embadded Document

db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdated: "1 hour ago"}}})

db.flightData.find().pretty()

//One more nested doc

db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdated: "1 hour ago", details: {responsible: "a person"}}}})

//Working with Arrays
db.passengers.find().pretty()
db.passengers.updateOne({name: "Albert Twostone"}, {$set: {hobbiles: ["sports", "cooking"]}})

//Accessing Structured Data

db.passengers.find({name: "Albert Twostone"}).pretty()

db.passengers.findOne({name: "Albert Twostone"}).hobbiles

db.passengers.find({hobbiles: "sports"}).pretty()

//Getting all description "on-time" //drill to embadded document

db.flightData.find({"status.description": "on-time"}).pretty()

//Go one more

db.flightData.find({"status.details.responsible": "a person"}).pretty()

use companyData
db.companies.insertOne({name: "FreshApple Inc",
                        isStartup: true,
                        employee: 33,
                        funding: 1234567890123456789,
                        details: {ceo: "Mark Super"},
                        tags: [{title: "super"}, {title: "perfect"}],
                        foundingDate: new Date(),
                        insertedAt: new Timestamp()
                       })
                       
 db.companies.find().pretty()
 
 db.stats()
 
 db.numbers.insertOne({a: 1})
 
 //Remove collection
 
 db.companies.drop()
 
 db.numbers.deleteMany({})
 
 db.numbers.findOne()
 
 db.stats()            
                            





