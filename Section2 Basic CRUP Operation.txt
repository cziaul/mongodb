//Insert
db.flightData.insertOne({
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  })
  
 db.flightData.insertMany( [ {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }]
  ) 
  
  
  db.flightData.insertOne({
    "departureAirport": "TXL",
    "arrivalAirport": "LHR",
  })
  
  db.flightData.insertOne({
    "_id": "tx1-1hr-1",
    "departureAirport": "TXL",
    "arrivalAirport": "LHR"
  })
  
//Delete
db.flightData.deleteOne({departureAirport: "TXL"})

db.flightData.deleteMany({marker: "toDelete"})

//Will delete all in flightData
db.flightData.deleteMany({})

/***** Find   ****/

db.flightData.find().pretty()
db.flightData.find({intercontinental: true}).pretty()
db.flightData.find({distance: {$gt: 1000}}).pretty()
db.flightData.find({distance: {$gt: 900}}).pretty()

//Note: pretty() not supported in findOne

/*
* Find gives us first 20 recrod and cursor, we need to type it to get next 20
* 
*/

db.flightData.find({})

db.flightData.find({intercontinental: true})

db.passengers.find().pretty() //will give first 20 by default

//to Array will give all data

db.passengers.find().toArray()  

//db.passengers.find().forEach() find gives multiple documents and cursor 

db.passengers.find().forEach((passengerData) => {printjson(passengerData)})

db.passengers.find({age: 29.0, name: "Max Schwarzmueller"}).forEach((passengers) => {printjson(passengers)})

db.passengers.find({age: 29.0, name: "Max Schwarzmueller"}).forEach((passengers) => {printjson(passengers)}).toArray??

db.flightData.find({_id: ObjectId("5fd5adf821d80622917ce0a8")}).pretty()

//One more nested doc

db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdated: "1 hour ago", details: {responsible: "a person"}}}})


/**projection (when we don't need all fields)*
 Happens before data shifts to the program 
 So this is fast
*/

//looking for name
db.passengers.find({hobbiles: "sports"}, {name: 1}).pretty()

//since id comes by default, we need to exclusively exclude id

db.passengers.find({}, {name: 1, _id: 0}).pretty()

db.passengers.find({}, {name: 1, age: 1,_id: 0}).pretty()

db.flightData.find({})

db.flightData.find({"status.description": "on-time"}, {"status.description": 1, "status.lastUpdated": 1, _id: 0})


/***** Update   ****/
/*
Difference between update and updateMany or updateOne is $set
update will work without $set but it will overwrite all other nodes
*/
db.flightData.find().pretty()

db.flightData.updateOne({_id: ObjectId("5fd5adf821d80622917ce0a8")}, {$set: {delayed: true}})

db.flightData.update({_id: ObjectId("5fd5adf821d80622917ce0a8")}, {$set: {delayed: false}})

//will overwrite all node and keep only node defined with update
db.flightData.update({_id: ObjectId("5fd5adf821d80622917ce0a8")}, {delayed: false})

//Will add marker node if not availabe but if available will update    
db.flightData.update({distance: 12000}, {$set: {marker: "delete"}})

//see MT to update all
db.flightData.updateMany({}, {$set: {marker: "toDelete"}})


//replaceOne

db.flightData.replaceOne({_id: ObjectId("5fd5adf821d80622917ce0a8")}, {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
})

//will replace all nodes but in the query
db.flightData.replaceOne({_id: ObjectId("5fd5adf821d80622917ce0a8")}, {
    "distance": 13000,
    "intercontinental": true
})

//Embadded Document
db.flightData.find().pretty()

db.flightData.updateMany({}, {$set: {status: {description: "on-time", lastUpdated: "1 hour ago"}}})

//Array

//Working with Arrays
db.passengers.find().pretty()
//Hobbies now list of doc
db.passengers.updateOne({name: "Albert Twostone"}, {$set: {hobbiles: ["sports", "cooking"]}})
db.passengers.find({name: "Albert Twostone"}).pretty()

//Accessing Structured Data

db.passengers.find({name: "Albert Twostone"}).pretty()

db.passengers.findOne({name: "Albert Twostone"}).hobbiles

db.passengers.find({hobbiles: "sports"}).pretty()

//Getting all description "on-time" //drill to embadded document

db.flightData.find({"status.description": "on-time"}).pretty()

//Go one more

db.flightData.find({"status.details.responsible": "a person"}).pretty()

db.flightData.find({distance: {$gt: 10000}}).pretty()




use companyData
db.companies.insertOne({name: "FreshApple Inc",
                        isStartup: true,
                        employee: 33,
                        funding: 1234567890123456789,
                        details: {ceo: "Mark Super"},
                        tags: [{title: "super"}, {title: "perfect"}],
                        foundingDate: new Date(),
                        insertedAt: new Timestamp()
                       })
                       
 db.companies.find().pretty()
 
 db.stats()
 
 db.numbers.insertOne({a: 1})
 
 //Remove collection
 
 db.companies.drop()
 
 db.numbers.deleteMany({})
 
 db.numbers.findOne()
 
 db.stats()            
                            
//Passengers

db.passengers.find().pretty()








